/*
 *  kernel/kernel.c
 *
 *  Minikernel. Versión 1.0
 *
 *  Fernando Pérez Costoya
 *
 */

/*
 *
 * Fichero que contiene la funcionalidad del sistema operativo
 *
 */

#include "kernel.h"	/* Contiene defs. usadas por este modulo */

/*
 *
 * Funciones relacionadas con la tabla de procesos:
 *	iniciar_tabla_proc buscar_BCP_libre
 *
 */

/*
 * Función que inicia la tabla de procesos
 */
static void iniciar_tabla_proc(){
	int i;

	for (i=0; i<MAX_PROC; i++)
		tabla_procs[i].estado=NO_USADA;
}

/*
 * Función que busca una entrada libre en la tabla de procesos
 */
static int buscar_BCP_libre(){
	int i;

	for (i=0; i<MAX_PROC; i++)
		if (tabla_procs[i].estado==NO_USADA)
			return i;
	return -1;
}

/*
 *
 * Funciones que facilitan el manejo de las listas de BCPs
 *	insertar_ultimo eliminar_primero eliminar_elem
 *
 * NOTA: PRIMERO SE DEBE LLAMAR A eliminar Y LUEGO A insertar
 */

/*
 * Inserta un BCP al final de la lista.
 */
static void insertar_ultimo(lista_BCPs *lista, BCP * proc){
	if (lista->primero==NULL)
		lista->primero= proc;
	else
		lista->ultimo->siguiente=proc;
	lista->ultimo= proc;
	proc->siguiente=NULL;
}

/*
 * Elimina el primer BCP de la lista.
 */
static void eliminar_primero(lista_BCPs *lista){

	if (lista->ultimo==lista->primero)
		lista->ultimo=NULL;
	lista->primero=lista->primero->siguiente;
}

/*
 * Elimina un determinado BCP de la lista.
 */
static void eliminar_elem(lista_BCPs *lista, BCP * proc){
	BCP *paux=lista->primero;

	if (paux==proc)
		eliminar_primero(lista);
	else {
		for ( ; ((paux) && (paux->siguiente!=proc));
			paux=paux->siguiente);
		if (paux) {
			if (lista->ultimo==paux->siguiente)
				lista->ultimo=paux;
			paux->siguiente=paux->siguiente->siguiente;
		}
	}
}

/*
 *
 * Funciones relacionadas con la planificacion
 *	espera_int planificador
 */

/*
 * Espera a que se produzca una interrupcion
 */
static void espera_int(){
	int nivel;

	printk("-> NO HAY LISTOS. ESPERA INT\n");

	/* Baja al mínimo el nivel de interrupción mientras espera */
	nivel=fijar_nivel_int(NIVEL_1);
	halt();
	fijar_nivel_int(nivel);
}

/*
 * Función de planificacion que implementa un algoritmo FIFO.
 */
static BCP * planificador(){
	while (lista_listos.primero==NULL)
		espera_int();		/* No hay nada que hacer */
	return lista_listos.primero;
}

/*
 *
 * Funcion auxiliar que termina proceso actual liberando sus recursos.
 * Usada por llamada terminar_proceso y por rutinas que tratan excepciones
 *
 */
static void liberar_proceso(){
	BCP * p_proc_anterior;
	int nivel_anterior;

	liberar_imagen(p_proc_actual->info_mem); /* liberar mapa */

	p_proc_actual->estado=TERMINADO;
	replanificar=0;

	nivel_anterior = fijar_nivel_int (NIVEL_3);
	eliminar_primero(&lista_listos); /* proc. fuera de listos */
	fijar_nivel_int (nivel_anterior);
	/* Realizar cambio de contexto */
	p_proc_anterior=p_proc_actual;
	p_proc_actual=planificador();

	printk("-> C.CONTEXTO POR FIN: de %d a %d\n",
			p_proc_anterior->id, p_proc_actual->id);

	liberar_pila(p_proc_anterior->pila);
	cambio_contexto(NULL, &(p_proc_actual->contexto_regs));

        return; /* no debería llegar aqui */
}

/*
 *
 * Funciones relacionadas con el tratamiento de interrupciones
 *	excepciones: exc_arit exc_mem
 *	interrupciones de reloj: int_reloj
 *	interrupciones del terminal: int_terminal
 *	llamadas al sistemas: llam_sis
 *	interrupciones SW: int_sw
 *
 */

/*
 * Tratamiento de excepciones aritmeticas
 */
static void exc_arit(){

	if (!viene_de_modo_usuario())
		panico("excepcion aritmetica cuando estaba dentro del kernel");


	printk("-> EXCEPCION ARITMETICA EN PROC %d\n", p_proc_actual->id);
	liberar_proceso();

        return; /* no debería llegar aqui */
}

/*
 * Tratamiento de excepciones en el acceso a memoria
 */
static void exc_mem(){

	if (!viene_de_modo_usuario() && dentro_zona==0)
		panico("excepcion de memoria cuando estaba dentro del kernel");


	printk("-> EXCEPCION DE MEMORIA EN PROC %d\n", p_proc_actual->id);

	liberar_proceso();

        return; /* no debería llegar aqui */
}

/*Leer y escribir en term*/

void escribir_buffer(char caracter){

	if (buffer_lectura.ocupacion<TAM_BUF_TERM){
		buffer_lectura.caracter[buffer_lectura.ocupacion]=caracter;
		buffer_lectura.ocupacion++;
	} else {
		printk("Buffer de lectura lleno.\n");
	}
	return;
}

int leer_buffer(){
	int caracter;
	int i;
	caracter=buffer_lectura.caracter[0];

	for (i=0;i<buffer_lectura.ocupacion;i++){
		buffer_lectura.caracter[i]=buffer_lectura.caracter[i+1];
	}
	
	buffer_lectura.ocupacion--;
	
	return caracter;
}



/*
 * Tratamiento de interrupciones de terminal
 */
static void int_terminal(){
	BCP *proceso;
	int nivel_anterior;
	char car;

	car = leer_puerto(DIR_TERMINAL);
	printk("-> TRATANDO INT. DE TERMINAL %c\n", car);
	
	nivel_anterior = fijar_nivel_int (NIVEL_2);
	escribir_buffer(car);
	fijar_nivel_int(nivel_anterior);
	if (lista_bloqueados_lect.primero != NULL) {
		proceso = lista_bloqueados_lect.primero;
		proceso->estado=LISTO;
		nivel_anterior = fijar_nivel_int (NIVEL_3);
		eliminar_primero(&lista_bloqueados_lect);
     		insertar_ultimo (&lista_listos, proceso);
		fijar_nivel_int(nivel_anterior);
	}

	

        return;
}

/*
 * Tratamiento de interrupciones de reloj
 */
static void int_reloj(){
	BCP *proceso;
	BCP *siguiente;
	printk("-> TRATANDO INT. DE RELOJ\n");
	num_int++;

	/*Tiempos proceso*/
	if(lista_listos.primero != NULL) { //No p listo -> No acumular
		if(viene_de_modo_usuario()){
			p_proc_actual-> num_int.usuario++;
		} else {
			p_proc_actual-> num_int.sistema++;
		}
	}	

	/*Procesos dormidos*/
	proceso=lista_bloqueados.primero;
	while(proceso!=NULL){
		
		proceso->sleep_time--;
		siguiente = proceso->siguiente;
		if(proceso->sleep_time==0){
			proceso->estado=LISTO;
			eliminar_elem(&lista_bloqueados, proceso);
			insertar_ultimo(&lista_listos, proceso);	
		}
		proceso=siguiente;	
	}

	/*Round Robin*/
	if(lista_listos.primero != NULL){
		p_proc_actual->rodaja--;
	}
	if (p_proc_actual->rodaja == 0){
		replanificar=1;
		activar_int_SW();
		printk("Int_SW activada.");
	}


        return;
}

/*
 * Tratamiento de llamadas al sistema
 */
static void tratar_llamsis(){
	int nserv, res;

	nserv=leer_registro(0);
	if (nserv<NSERVICIOS)
		res=(tabla_servicios[nserv].fservicio)();
	else
		res=-1;		/* servicio no existente */
	escribir_registro(0,res);
	return;
}

/*
 * Tratamiento de interrupciuones software
 */
static void int_sw(){
	int nivel_anterior;

	BCP *p_proc_anterior;

	printk("-> TRATANDO INT. SW\n");	

	if(replanificar==1){

		replanificar=0;
	
		/*Replanificación*/
		p_proc_actual->estado = LISTO;
      		p_proc_actual->rodaja = TICKS_POR_RODAJA;	/* Actualizamos Rodaja */
		p_proc_anterior=p_proc_actual;
		p_proc_anterior->rodaja = TICKS_POR_RODAJA;
		p_proc_anterior->estado = LISTO;
		nivel_anterior = fijar_nivel_int (NIVEL_3);
		eliminar_primero (&lista_listos);
		insertar_ultimo(&lista_listos, p_proc_anterior);
		fijar_nivel_int (nivel_anterior);
		p_proc_actual=planificador();

		cambio_contexto(&(p_proc_anterior->contexto_regs), &(p_proc_actual->contexto_regs)); 
		printk("-> Cambio contexto (round robin): %d -> %d\n", p_proc_anterior->id, p_proc_actual->id);
		}

	return;
}

/*
 *
 * Funcion auxiliar que crea un proceso reservando sus recursos.
 * Usada por llamada crear_proceso.
 *
 */
static int crear_tarea(char *prog){
	void * imagen, *pc_inicial;
	int error=0;
	int proc;
	BCP *p_proc;
	int nivel_anterior;

	proc=buscar_BCP_libre();
	if (proc==-1)
		return -1;	/* no hay entrada libre */

	/* A rellenar el BCP ... */
	p_proc=&(tabla_procs[proc]);

	/* crea la imagen de memoria leyendo ejecutable */
	imagen=crear_imagen(prog, &pc_inicial);
	if (imagen)
	{
		p_proc->info_mem=imagen;
		p_proc->pila=crear_pila(TAM_PILA);
		fijar_contexto_ini(p_proc->info_mem, p_proc->pila, TAM_PILA,
			pc_inicial,
			&(p_proc->contexto_regs));
		p_proc->id=proc;
		p_proc->rodaja=TICKS_POR_RODAJA;
		p_proc->estado=LISTO;

		/* lo inserta al final de cola de listos */
		nivel_anterior = fijar_nivel_int (NIVEL_3);
		insertar_ultimo(&lista_listos, p_proc);
		fijar_nivel_int (nivel_anterior);
		error= 0;
	}
	else
		error= -1; /* fallo al crear imagen */

	return error;
}

/*
 *
 * Rutinas que llevan a cabo las llamadas al sistema
 *	sis_crear_proceso sis_escribir
 *
 */

/*
 * Tratamiento de llamada al sistema crear_proceso. Llama a la
 * funcion auxiliar crear_tarea sis_terminar_proceso
 */
int sis_crear_proceso(){
	char *prog;
	int res;

	printk("-> PROC %d: CREAR PROCESO\n", p_proc_actual->id);
	prog=(char *)leer_registro(1);
	res=crear_tarea(prog);
	return res;
}

/*
 * Tratamiento de llamada al sistema escribir. Llama simplemente a la
 * funcion de apoyo escribir_ker
 */
int sis_escribir()
{
	char *texto;
	unsigned int longi;

	texto=(char *)leer_registro(1);
	longi=(unsigned int)leer_registro(2);

	escribir_ker(texto, longi);
	return 0;
}

/*
 * Tratamiento de llamada al sistema terminar_proceso. Llama a la
 * funcion auxiliar liberar_proceso
 */
int sis_terminar_proceso(){

	printk("-> FIN PROCESO %d\n", p_proc_actual->id);

	liberar_proceso();

        return 0; /* no debería llegar aqui */
}

int obtener_id_pr(){
	return p_proc_actual->id;
}

int dormir(){
	unsigned int segundos;
	int nivel_anterior;
	BCP *p_anterior;

	/*Bloqueamos tiempo necesario*/
	segundos = leer_registro(1);
	nivel_anterior = fijar_nivel_int (NIVEL_3);
	p_proc_actual->sleep_time=segundos * TICK;
	p_proc_actual->estado=BLOQUEADO;
	p_proc_actual->rodaja = TICKS_POR_RODAJA; 
	/*Actualizamos listas*/	
	eliminar_primero(&lista_listos);
	insertar_ultimo(&lista_bloqueados,p_proc_actual);
	fijar_nivel_int (nivel_anterior);
	/*Cambio de contexto*/
	p_anterior=p_proc_actual;
	p_proc_actual=planificador();
	replanificar=0;
	cambio_contexto(&(p_anterior->contexto_regs), &(p_proc_actual->contexto_regs));

	/*Restauramos nivel de interrupción anterior*/
	return 0;
}

int tiempos_proceso(){
	int nivel_anterior = fijar_nivel_int(NIVEL_3);
	struct tiempos_ejec *t_ejec;

	
	t_ejec = (struct tiempos_ejec *)leer_registro(1);
	
	if( t_ejec != NULL){
	dentro_zona=1;
	t_ejec->usuario = p_proc_actual ->num_int.usuario;
	t_ejec->sistema = p_proc_actual ->num_int.sistema;
	dentro_zona=0;
	}


	fijar_nivel_int(nivel_anterior);

return num_int;
}


int leer_caracter(){
	int nivel_anterior, nivel; 
	int caracter;

	BCP *p_proc_anterior;
	nivel = fijar_nivel_int(NIVEL_2);
	while (buffer_lectura.ocupacion == 0){
		/*Bloqueamos el proceso*/
		p_proc_anterior=p_proc_actual;
		p_proc_anterior->estado=BLOQUEADO;
		p_proc_anterior->rodaja=0;
		nivel_anterior = fijar_nivel_int(NIVEL_3);
		eliminar_primero (&lista_listos);
		insertar_ultimo(&lista_bloqueados_lect, p_proc_anterior);		
		p_proc_actual=planificador();
		replanificar=0;
		cambio_contexto(&(p_proc_anterior->contexto_regs), &(p_proc_actual->contexto_regs));
		fijar_nivel_int(nivel_anterior);	
	}
	
	caracter=leer_buffer();
	fijar_nivel_int(nivel);

	return caracter;		
}



/*int crear_mutex(){
  
  int i=1;j=1;

  char *nombre;
  int tipo;

  nombre = (char *)leer_registro(1);
  tipo = (int)leer_registro(2);

  if (strlen(nombre)>MAX_NOM_MUT)
	return -1;

  while (lista_mutex[i].creado =! 0){
	i++
  }

  if (i>=NUM_MUT){
	printk("Numero máximo de mutex creados)
  } else {
	lista_mutex[i].creado=1;
	while(p_proc_actual -> id_mutex[j]!=0){
		j++
	}	
	p_proc_actual -> id_mutex[j]!=i
  }
  

}*/

int crear_mutex(){
	int tipo;
	char *nombre;

	nombre=(char *) leer_registro(1);
	tipo=(int) leer_registro(2);
	
	replanificar=0;
	return 0;
}

int abrir_mutex(){
	char *nombre;

	nombre=(char*) leer_registro(1);
	
	return 0;
}

int lock(){
	unsigned int mutexid;

	mutexid=(unsigned int) leer_registro(1);
	replanificar=0;
	return 0;
}

int unlock(){
	unsigned int mutexid;

	mutexid=(unsigned int) leer_registro(1);
	
	return 0;
}

int cerrar_mutex(){
	unsigned int mutexid;

	mutexid=(unsigned int) leer_registro(1);
	return 0;
}



/*
 *
 * Rutina de inicialización invocada en arranque
 *
 */
int main(){
	/* se llega con las interrupciones prohibidas */

	instal_man_int(EXC_ARITM, exc_arit); 
	instal_man_int(EXC_MEM, exc_mem); 
	instal_man_int(INT_RELOJ, int_reloj); 
	instal_man_int(INT_TERMINAL, int_terminal); 
	instal_man_int(LLAM_SIS, tratar_llamsis); 
	instal_man_int(INT_SW, int_sw); 

	iniciar_cont_int();		/* inicia cont. interr. */
	iniciar_cont_reloj(TICK);	/* fija frecuencia del reloj */
	iniciar_cont_teclado();		/* inici cont. teclado */

	iniciar_tabla_proc();		/* inicia BCPs de tabla de procesos */

	buffer_lectura.ocupacion=0;
	replanificar=0;

	/* crea proceso inicial */
	if (crear_tarea((void *)"init")<0)
		panico("no encontrado el proceso inicial");
	
	/* activa proceso inicial */
	p_proc_actual=planificador();
	cambio_contexto(NULL, &(p_proc_actual->contexto_regs));
	panico("S.O. reactivado inesperadamente");
	return 0;
}
